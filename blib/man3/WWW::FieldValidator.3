.\" Automatically generated by Pod::Man version 1.02
.\" Fri Apr 11 14:34:00 2003
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "FieldValidator 3"
.TH FieldValidator 3 "perl v5.6.0" "2003-04-11" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1WWW:\s0:FieldValidator \- Provides simple yet robust validation of user entered input
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1OO\s0 module that is used to validate input.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used by \s-1WWW:\s0:Form to perform various validations on input.  This
document covers using the \s-1WWW:\s0:FieldValidator module as part of a Form object.  In this
case, the only thing you need to know how to do is to instantiate \s-1WWW:\s0:FieldValidators
properly.  All the validation is handled internally by \s-1WWW:\s0:Form.
.Sh "Function Reference"
.IX Subsection "Function Reference"
\&\fBnew($validatorType, \f(CB$errorFeedback\fB, [$minLength, \f(CB$maxLength\fB, \f(CB$regex\fB], [$isOptional])\fR
.PP
.Vb 4
\&  Creates a FieldValidator object.  $validatorType is used to determine what type
\&  of validation will be performed on the input.  The following validator types are
\&  supported (Note these are constants, the $validatorType param needs to be one of
\&  the following values):
.Ve
.Vb 5
\&  WWW::FieldValidator::WELL_FORMED_EMAIL # input must conform to /^[\ew\e-\e.\e+]+@(\ew+)(\e.([\ew\e-]+))+$/
\&  WWW::FieldValidator::MIN_STR_LENGTH    # input must be >= a specified string length
\&  WWW::FieldValidator::MAX_STR_LENGTH    # input must be <= a specified string length
\&  WWW::FieldValidator::REGEX_MATCH       # input must match a user defined regex
\&  WWW::FieldValidator::USER_DEFINED_SUB  # input must pass a user defined subroutine's validation
.Ve
.Vb 1
\&  Examples:
.Ve
.Vb 3
\&  # create a validator that checks to see if input is a well formed email address
\&  WWW::FieldValidator->new(WWW::FieldValidator::WELL_FORMED_EMAIL,
\&                           'Please make sure you enter a well formed email address');
.Ve
.Vb 5
\&  # creates a validator that checks to see if input is
\&  # well formed only if input is not null (or numm string)
\&  WWW::FieldValidator->new(WWW::FieldValidator::WELL_FORMED_EMAIL,
\&                           'Please make sure you enter a well formed email address',
\&                           $isOptional = 1);
.Ve
.Vb 4
\&  # creates a validator that checks to see if the input is at least min length
\&  WWW::FieldValidator->new(WWW::FieldValidator::MIN_STR_LENGTH,
\&                           'Please make sure you enter something at least 10 characters long',
\&                           10);
.Ve
.Vb 6
\&  # creates a validator that checks to see if the input is at least min length
\&  # only if input is not null or null string
\&  WWW::FieldValidator->new(WWW::FieldValidator::MIN_STR_LENGTH,
\&                           'Please make sure you enter something at least 10 characters long',
\&                           10,
\&                           1);
.Ve
.Vb 4
\&  # creates a validator that checks to see if the input is less than max length
\&  WWW::FieldValidator->new(WWW::FieldValidator::MAX_STR_LENGTH,
\&                           'Please make sure you enter something less than or equal to 5 characters',
\&                           5);
.Ve
.Vb 6
\&  # creates a validator that checks to see if the input is less than max length
\&  # only if input is not null or null string
\&  WWW::FieldValidator->new(WWW::FieldValidator::MAX_STR_LENGTH,
\&                           'Please make sure you enter something less than or equal to 5 characters',
\&                           5,
\&                           1);
.Ve
.Vb 4
\&  # creates a validator that checks to see if the input matches the specified regex
\&  WWW::FieldValidator->new(WWW::FieldValidator::REGEX_MATCH,
\&                           'Please make sure you enter a number',
\&                           ^\ed+$|^\ed+\e.\ed*$|^\ed*\e.\ed+$');
.Ve
.Vb 6
\&  # creates a validator that checks to see if the input matches the specified regex
\&  # only if input is not null or null string
\&  WWW::FieldValidator->new(WWW::FieldValidator::REGEX_MATCH,
\&                           'If you are going to enter anything please make sure you enter a number',
\&                           ^\ed+$|^\ed+\e.\ed*$|^\ed*\e.\ed+$',
\&                           1);
.Ve
.Vb 4
\&  # creates a validator that checks to see if the input is good according to sub ref
\&  WWW::FieldValidator->new(WWW::FieldValidator::USER_DEFINED_SUB,
\&                           'The name you entered already exists',
\&                           \e&is_name_unique);
.Ve
.Vb 6
\&  # creates a validator that checks to see if the input is good according to sub ref
\&  # only if input is not null or null string
\&  WWW::FieldValidator->new(WWW::FieldValidator::USER_DEFINED_SUB,
\&                           'If you are going to enter a name, you must enter one that does not already exist',
\&                           \e&is_name_unique,
\&                           1);
.Ve
.Vb 6
\&  # if you use the validator type: USER_DEFINED_SUB, your subroutine will have access to
\&  # the value of the form input that your validator is assigned to
\&  Example:
\&  sub is_name_unique {
\&      # gets passed in to this sub for you by way of Form module
\&      my $name = shift;
.Ve
.Vb 6
\&      if ($names->{$name}) {
\&          return 0; # name already exists, input is invalid
\&      } else {
\&          return 1;
\&      }
\&  }
.Ve
If you want to use \s-1WWW:\s0:FieldValidator outside of \s-1WWW:\s0:Form it's easy to do.  The only
method you need to use is validate.
.PP
\&\fBvalidate($input)\fR
.PP
Returns true if \f(CW$input\fR passes validation or false otherwise.
.PP
.Vb 1
\&  Example:
.Ve
.Vb 2
\&  my $email_validator = WWW::FieldValidator->new(WWW::FieldValidator::WELL_FORMED_EMAIL,
\&                            'Please make sure you enter a well formed email address');
.Ve
.Vb 1
\&  my $params = $r->param();
.Ve
.Vb 1
\&  if (my $email = $params->{email}) {
.Ve
.Vb 4
\&      unless ($email_validator->validate($email)) {
\&          print $email_validator->getFeedback();
\&      }
\&  }
.Ve
\&\fB\f(BIgetFeedback()\fB\fR
.PP
Returns error feedback for a FieldValidator.  This can also be called as \fIget_feedback()\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1WWW:\s0:Form
.SH "AUTHOR"
.IX Header "AUTHOR"
Ben Schmaus
.PP
If you find this module useful or have any suggestions or comments please
send me an email at perlmods@benschmaus.com.
.SH "BUGS"
.IX Header "BUGS"
None that I know of, but let me know if you find any.
.PP
Send email to perlmods@benschmaus.com
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2003, Ben Schmaus.  All Rights Reserved.
.PP
This program is free software.  You may copy or redistribute it under
the same terms as Perl itself.  If you find this module useful, please
let me know.
